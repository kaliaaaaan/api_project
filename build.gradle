plugins {
    id 'java'
    id 'io.qameta.allure' version '2.10.0'
    id 'io.freefair.lombok' version '6.0.0-m2'
}

version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

def allureVersion = "2.22.1",
    restAssuredVersion = "5.3.2",
    validatorRestAssuredVersion = "5.3.2",
    javaFakerVersion = "1.0.2",
    jupiterVersion = "5.10.0",
    ownerVersion = "1.0.12",
    assertjCoreVersion = "3.24.2"

allure {
    report {
        version.set("${allureVersion}")
    }
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set("${allureVersion}")
            }
        }
    }
}

dependencies {
    testImplementation(
            "org.junit.jupiter:junit-jupiter:${jupiterVersion}",
            "io.rest-assured:rest-assured:${restAssuredVersion}",
            "io.rest-assured:json-schema-validator:${validatorRestAssuredVersion}",
            "com.github.javafaker:javafaker:${javaFakerVersion}",
            "org.slf4j:slf4j-simple:2.0.5",
            "org.aeonbits.owner:owner:${ownerVersion}",
            "io.qameta.allure:allure-rest-assured:${allureVersion}",
            "org.assertj:assertj-core:${assertjCoreVersion}"
    )
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF=8'
}

compileTestJava.options.encoding = 'UTF-8'

tasks.withType(Test) {
    useJUnitPlatform()
    systemProperties(System.getProperties())

    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

task sanity(type: Test) {
    useJUnitPlatform {
        includeTags("sanity")
    }
}